@model PaymentInfoModel
@{
    ViewData["Title"] = "Check Out";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Payment (в разработке)</h1>

@section Styles {
    <!-- link to the local SqPaymentForm style customization -->
    <link rel="stylesheet" href="~/css/sq-payment-form.css.css" />
}

<div id="form-container">
    <div id="sq-card-number"></div>
    <div class="third" id="sq-expiration-date"></div>
    <div class="third" id="sq-cvv"></div>
    <!-- <div class="third" id="sq-postal-code"></div>-->
    <button id="sq-creditcard" class="button-credit-card" onclick="onGetCardNonce(event)">Pay $1.00</button>
</div>


    @section Scripts {
        <!-- link to the SqPaymentForm library-->
    <script type="text/javascript" src="@Model.PaymentFormUrl"></script>
    <script type="text/javascript">
        window.applicationId = "@Model.ApplicationId";
        window.locationId = "@Model.LocationId";
    </script>
    <!-- link to the local SqPaymentForm initialization
    <script type="text/javascript" src="~/js/sq-payment-form.js"></script>-->



    <script type="text/javascript">
        // Create and initialize a payment form object
        const formData = new FormData();
        const paymentForm = new SqPaymentForm({
            // Initialize the payment form elements

            //TODO: Replace with your sandbox application ID
            applicationId: "sandbox-sq0idb-uOWmpOGuuL2fnvH-Sf3U-Q",
            locationId: locationId,
            inputClass: 'sq-input',
            autoBuild: false,
            // Customize the CSS for SqPaymentForm iframe elements
            inputStyles: [{
                fontSize: '16px',
                lineHeight: '24px',
                padding: '16px',
                placeholderColor: '#a0a0a0',
                backgroundColor: 'transparent',
            }],
            // Initialize the credit card placeholders
            cardNumber: {
                elementId: 'sq-card-number',
                placeholder: 'Card Number'
            },
            cvv: {
                elementId: 'sq-cvv',
                placeholder: 'CVV'
            },
            expirationDate: {
                elementId: 'sq-expiration-date',
                placeholder: 'MM/YY'
            },
            postalCode: false,
            // SqPaymentForm callback functions
            callbacks: {
                /*
                * callback function: cardNonceResponseReceived
                * Triggered when: SqPaymentForm completes a card nonce request
                */
                cardNonceResponseReceived: function (errors, nonce, cardData) {
                    if (errors) {
                        // Log errors from nonce generation to the browser developer console.
                        console.error('Encountered errors:');
                        errors.forEach(function (error) {
                            console.error('  ' + error.message);
                        });
                        alert('Encountered errors, check browser developer console for more details');
                        return;
                    }

                    //TODO: Replace alert with code in step 2.1
                    // alert(`The generated nonce is:\n${nonce}`);
                    formData.append('nonce', nonce);
                    var object = {};
                    formData.forEach((value, key) => { object[key] = value });
                    var jsonData = JSON.stringify(object);

                    fetch('process-payment', {
                        method: 'POST',
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        },
                        body: jsonData
                    })
                        .catch(err => {
                            alert('Network error: ' + err);
                        })
                        .then(response => {
                            if (!response.ok) {
                                return response.text().then(errorInfo => Promise.reject(errorInfo));
                            }
                            return response.text();
                        })
                        .then(data => {
                            console.log(JSON.stringify(data));
                            alert('Payment complete successfully!\nCheck browser developer console for more details');
                        })
                        .catch(err => {
                            console.error(err);
                            alert('Payment failed to complete!\nCheck browser developer console for more details');
                        });
                }
            }
        });

        // TODO: paste code from step 1.1.5
        paymentForm.build();
        // onGetCardNonce is triggered when the "Pay $1.00" button is clicked
        function onGetCardNonce(event) {
            // Don't submit the form until SqPaymentForm returns with a nonce
            event.preventDefault();
            // Request a nonce from the SqPaymentForm object
            paymentForm.requestCardNonce();
        }
    </script>
}
